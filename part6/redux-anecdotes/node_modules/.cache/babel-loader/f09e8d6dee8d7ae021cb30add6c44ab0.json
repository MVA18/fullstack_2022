{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nlet timeouts = [];\nconst notificationSlice = createSlice({\n  name: 'notification',\n  initialState: '',\n  reducers: {\n    show(state, action) {\n      return state = action.payload;\n    },\n\n    reset(state, action) {\n      return state = '';\n    }\n\n  }\n});\n\nconst clearTimeoutsQueue = () => {\n  if (timeouts.length > 1) {\n    timeouts.forEach(id => {\n      if (timeouts[timeouts.length - 1] !== id) {\n        clearTimeout(id);\n      }\n    });\n  }\n};\n\nexport const {\n  show,\n  reset\n} = notificationSlice.actions;\nexport const setNotification = (content, timer) => {\n  return dispatch => {\n    dispatch(show(content));\n    const timeoutId = setTimeout(() => {\n      dispatch(reset());\n    }, timer);\n    timeouts.push(timeoutId);\n    clearTimeoutsQueue();\n  };\n};\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/mva18/Projects/fullstack_2022/part6/redux-anecdotes/src/reducers/notificationReducer.js"],"names":["createSlice","timeouts","notificationSlice","name","initialState","reducers","show","state","action","payload","reset","clearTimeoutsQueue","length","forEach","id","clearTimeout","actions","setNotification","content","timer","dispatch","timeoutId","setTimeout","push","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,IAAIC,QAAQ,GAAG,EAAf;AAEA,MAAMC,iBAAiB,GAAGF,WAAW,CAAC;AAClCG,EAAAA,IAAI,EAAE,cAD4B;AAElCC,EAAAA,YAAY,EAAE,EAFoB;AAGlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAChB,aAAOD,KAAK,GAAGC,MAAM,CAACC,OAAtB;AACH,KAHK;;AAINC,IAAAA,KAAK,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACjB,aAAOD,KAAK,GAAG,EAAf;AACH;;AANK;AAHwB,CAAD,CAArC;;AAaA,MAAMI,kBAAkB,GAAG,MAAM;AAC7B,MAAGV,QAAQ,CAACW,MAAT,GAAkB,CAArB,EAAwB;AACpBX,IAAAA,QAAQ,CAACY,OAAT,CAAkBC,EAAD,IAAQ;AACrB,UAAGb,QAAQ,CAACA,QAAQ,CAACW,MAAT,GAAkB,CAAnB,CAAR,KAAkCE,EAArC,EAAwC;AACpCC,QAAAA,YAAY,CAACD,EAAD,CAAZ;AACH;AACJ,KAJD;AAKH;AACJ,CARD;;AAUA,OAAO,MAAM;AAAER,EAAAA,IAAF;AAAQI,EAAAA;AAAR,IAAkBR,iBAAiB,CAACc,OAA1C;AAEP,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC/C,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACd,IAAI,CAACY,OAAD,CAAL,CAAR;AACA,UAAMG,SAAS,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,QAAQ,CAACV,KAAK,EAAN,CAAR;AACH,KAF2B,EAEzBS,KAFyB,CAA5B;AAGAlB,IAAAA,QAAQ,CAACsB,IAAT,CAAcF,SAAd;AACAV,IAAAA,kBAAkB;AACrB,GAPD;AAQH,CATM;AAUP,eAAeT,iBAAiB,CAACsB,OAAjC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nlet timeouts = [];\n\nconst notificationSlice = createSlice({\n    name: 'notification',\n    initialState: '',\n    reducers: {\n        show(state, action) {\n            return state = action.payload\n        },\n        reset(state, action) {\n            return state = ''\n        },\n    }\n})\n\nconst clearTimeoutsQueue = () => {\n    if(timeouts.length > 1) {\n        timeouts.forEach((id) => {\n            if(timeouts[timeouts.length - 1] !== id){\n                clearTimeout(id)\n            }\n        })\n    }\n}\n\nexport const { show, reset } = notificationSlice.actions\n\nexport const setNotification = (content, timer) => {\n    return dispatch => {\n        dispatch(show(content))\n        const timeoutId = setTimeout(() => {\n            dispatch(reset())\n        }, timer)\n        timeouts.push(timeoutId)\n        clearTimeoutsQueue()\n    }\n}\nexport default notificationSlice.reducer\n"]},"metadata":{},"sourceType":"module"}