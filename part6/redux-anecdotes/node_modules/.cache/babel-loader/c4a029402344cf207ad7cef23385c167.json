{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nlet timeoutsIds = [];\nconst notificationSlice = createSlice({\n  name: 'notification',\n  initialState: '',\n  reducers: {\n    show(state, action) {\n      return state = action.payload;\n    },\n\n    reset(state, action) {\n      return state = '';\n    }\n\n  }\n});\n\nconst clearTimeoutsQueue = async () => {\n  if (timeoutsIds.length > 1) {\n    window.clearTimeout(timeoutsIds.length - 2); // clearTimeout(timeoutsIds.length - 2)\n    // timeoutsIds.forEach((id) => {\n    //     if(timeoutsIds[timeoutsIds.length - 1] !== id){\n    //         clearTimeout(id)\n    //     }\n    // })\n\n    timeoutsIds = [];\n  }\n};\n\nexport const {\n  show,\n  reset\n} = notificationSlice.actions;\nexport const setNotification = (content, timer) => {\n  return dispatch => {\n    dispatch(show(content));\n    const timeoutId = window.setTimeout(() => {\n      dispatch(reset());\n    }, timer);\n    timeoutsIds.push(timeoutId);\n    clearTimeoutsQueue();\n  };\n};\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/mva18/Projects/fullstack_2022/part6/redux-anecdotes/src/reducers/notificationReducer.js"],"names":["createSlice","timeoutsIds","notificationSlice","name","initialState","reducers","show","state","action","payload","reset","clearTimeoutsQueue","length","window","clearTimeout","actions","setNotification","content","timer","dispatch","timeoutId","setTimeout","push","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,IAAIC,WAAW,GAAG,EAAlB;AAEA,MAAMC,iBAAiB,GAAGF,WAAW,CAAC;AAClCG,EAAAA,IAAI,EAAE,cAD4B;AAElCC,EAAAA,YAAY,EAAE,EAFoB;AAGlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAChB,aAAOD,KAAK,GAAGC,MAAM,CAACC,OAAtB;AACH,KAHK;;AAINC,IAAAA,KAAK,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACjB,aAAOD,KAAK,GAAG,EAAf;AACH;;AANK;AAHwB,CAAD,CAArC;;AAaA,MAAMI,kBAAkB,GAAG,YAAY;AACnC,MAAGV,WAAW,CAACW,MAAZ,GAAqB,CAAxB,EAA2B;AACvBC,IAAAA,MAAM,CAACC,YAAP,CAAoBb,WAAW,CAACW,MAAZ,GAAqB,CAAzC,EADuB,CAEvB;AACA;AACA;AACA;AACA;AACA;;AACAX,IAAAA,WAAW,GAAG,EAAd;AACH;AACJ,CAXD;;AAaA,OAAO,MAAM;AAAEK,EAAAA,IAAF;AAAQI,EAAAA;AAAR,IAAkBR,iBAAiB,CAACa,OAA1C;AAEP,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC/C,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACb,IAAI,CAACW,OAAD,CAAL,CAAR;AACA,UAAMG,SAAS,GAAGP,MAAM,CAACQ,UAAP,CAAkB,MAAM;AACtCF,MAAAA,QAAQ,CAACT,KAAK,EAAN,CAAR;AACH,KAFiB,EAEfQ,KAFe,CAAlB;AAGAjB,IAAAA,WAAW,CAACqB,IAAZ,CAAiBF,SAAjB;AACAT,IAAAA,kBAAkB;AACrB,GAPD;AAQH,CATM;AAUP,eAAeT,iBAAiB,CAACqB,OAAjC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nlet timeoutsIds = [];\n\nconst notificationSlice = createSlice({\n    name: 'notification',\n    initialState: '',\n    reducers: {\n        show(state, action) {\n            return state = action.payload\n        },\n        reset(state, action) {\n            return state = ''\n        },\n    }\n})\n\nconst clearTimeoutsQueue = async () => {\n    if(timeoutsIds.length > 1) {\n        window.clearTimeout(timeoutsIds.length - 2)\n        // clearTimeout(timeoutsIds.length - 2)\n        // timeoutsIds.forEach((id) => {\n        //     if(timeoutsIds[timeoutsIds.length - 1] !== id){\n        //         clearTimeout(id)\n        //     }\n        // })\n        timeoutsIds = []\n    }\n}\n\nexport const { show, reset } = notificationSlice.actions\n\nexport const setNotification = (content, timer) => {\n    return dispatch => {\n        dispatch(show(content))\n        const timeoutId = window.setTimeout(() => {\n            dispatch(reset())\n        }, timer)\n        timeoutsIds.push(timeoutId)\n        clearTimeoutsQueue()\n    }\n}\nexport default notificationSlice.reducer\n"]},"metadata":{},"sourceType":"module"}