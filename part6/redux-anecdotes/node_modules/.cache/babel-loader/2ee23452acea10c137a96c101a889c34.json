{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst notificationSlice = createSlice({\n  name: 'notifications',\n  initialState: [],\n  reducers: {\n    show(state, action) {\n      state.push(action.payload);\n      return state;\n    },\n\n    reset(state, action) {\n      return state = [];\n    },\n\n    clearTimeOut(state, action) {\n      state.forEach(notification => {\n        console.log(notification.id);\n        clearTimeout(notification.id);\n      });\n    }\n\n  }\n});\nexport const {\n  show,\n  reset,\n  clearTimeOut\n} = notificationSlice.actions;\nexport const setNotification = (content, timer) => {\n  return async dispatch => {\n    const timeoutId = setTimeout(() => {\n      dispatch(reset());\n    }, timer);\n    const notification = {\n      id: timeoutId,\n      message: content\n    };\n    dispatch(clearTimeOut());\n    dispatch(show(notification));\n  };\n};\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/mva18/Projects/fullstack_2022/part6/redux-anecdotes/src/reducers/notificationReducer.js"],"names":["createSlice","notificationSlice","name","initialState","reducers","show","state","action","push","payload","reset","clearTimeOut","forEach","notification","console","log","id","clearTimeout","actions","setNotification","content","timer","dispatch","timeoutId","setTimeout","message","reducer"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AAEA,MAAMC,iBAAiB,GAAGD,WAAW,CAAC;AAClCE,EAAAA,IAAI,EAAE,eAD4B;AAElCC,EAAAA,YAAY,EAAE,EAFoB;AAGlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAChBD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACA,aAAOH,KAAP;AACH,KAJK;;AAKNI,IAAAA,KAAK,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACjB,aAAOD,KAAK,GAAG,EAAf;AACH,KAPK;;AAQNK,IAAAA,YAAY,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACM,OAAN,CAAeC,YAAD,IAAkB;AAC5BC,QAAAA,OAAO,CAACC,GAAR,CAAYF,YAAY,CAACG,EAAzB;AACAC,QAAAA,YAAY,CAACJ,YAAY,CAACG,EAAd,CAAZ;AACH,OAHD;AAKH;;AAdK;AAHwB,CAAD,CAArC;AAqBA,OAAO,MAAM;AAACX,EAAAA,IAAD;AAAOK,EAAAA,KAAP;AAAcC,EAAAA;AAAd,IAA8BV,iBAAiB,CAACiB,OAAtD;AAEP,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC/C,SAAO,MAAMC,QAAN,IAAkB;AACrB,UAAMC,SAAS,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,QAAQ,CAACZ,KAAK,EAAN,CAAR;AACH,KAF2B,EAEzBW,KAFyB,CAA5B;AAGA,UAAMR,YAAY,GAAG;AACjBG,MAAAA,EAAE,EAAEO,SADa;AAEjBE,MAAAA,OAAO,EAAEL;AAFQ,KAArB;AAIAE,IAAAA,QAAQ,CAACX,YAAY,EAAb,CAAR;AACAW,IAAAA,QAAQ,CAACjB,IAAI,CAACQ,YAAD,CAAL,CAAR;AACH,GAVD;AAWH,CAZM;AAaP,eAAeZ,iBAAiB,CAACyB,OAAjC","sourcesContent":["import {createSlice} from '@reduxjs/toolkit'\n\nconst notificationSlice = createSlice({\n    name: 'notifications',\n    initialState: [],\n    reducers: {\n        show(state, action) {\n            state.push(action.payload)\n            return state\n        },\n        reset(state, action) {\n            return state = []\n        },\n        clearTimeOut(state, action) {\n            state.forEach((notification) => {\n                console.log(notification.id)\n                clearTimeout(notification.id)\n            })\n\n        },\n    }\n})\n\nexport const {show, reset, clearTimeOut} = notificationSlice.actions\n\nexport const setNotification = (content, timer) => {\n    return async dispatch => {\n        const timeoutId = setTimeout(() => {\n            dispatch(reset())\n        }, timer)\n        const notification = {\n            id: timeoutId,\n            message: content\n        }\n        dispatch(clearTimeOut())\n        dispatch(show(notification))\n    }\n}\nexport default notificationSlice.reducer\n"]},"metadata":{},"sourceType":"module"}