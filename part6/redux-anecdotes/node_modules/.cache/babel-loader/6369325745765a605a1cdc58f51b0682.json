{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nlet timeouts = [];\nconst notificationSlice = createSlice({\n  name: 'notification',\n  initialState: '',\n  reducers: {\n    show(state, action) {\n      return state = action.payload;\n    },\n\n    reset(state, action) {\n      return state = '';\n    }\n\n  }\n});\nexport const {\n  show,\n  reset\n} = notificationSlice.actions;\nexport const setNotification = (content, timer) => {\n  return dispatch => {\n    dispatch(show(content));\n    const timeoutId = setTimeout(() => {\n      dispatch(reset());\n    }, timer);\n    timeouts.push(timeoutId);\n    console.log(timeouts.length);\n\n    if (timeouts.length > 1) {\n      timeouts.forEach(id => {\n        if (timeouts[timeouts.length - 1] !== id) {\n          clearTimeout(id);\n        }\n      });\n    }\n  };\n};\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/mva18/Projects/fullstack_2022/part6/redux-anecdotes/src/reducers/notificationReducer.js"],"names":["createSlice","timeouts","notificationSlice","name","initialState","reducers","show","state","action","payload","reset","actions","setNotification","content","timer","dispatch","timeoutId","setTimeout","push","console","log","length","forEach","id","clearTimeout","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,IAAIC,QAAQ,GAAG,EAAf;AAEA,MAAMC,iBAAiB,GAAGF,WAAW,CAAC;AAClCG,EAAAA,IAAI,EAAE,cAD4B;AAElCC,EAAAA,YAAY,EAAE,EAFoB;AAGlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAChB,aAAOD,KAAK,GAAGC,MAAM,CAACC,OAAtB;AACH,KAHK;;AAINC,IAAAA,KAAK,CAACH,KAAD,EAAQC,MAAR,EAAgB;AACjB,aAAOD,KAAK,GAAG,EAAf;AACH;;AANK;AAHwB,CAAD,CAArC;AAaA,OAAO,MAAM;AAAED,EAAAA,IAAF;AAAQI,EAAAA;AAAR,IAAkBR,iBAAiB,CAACS,OAA1C;AAEP,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC/C,SAAOC,QAAQ,IAAI;AACfA,IAAAA,QAAQ,CAACT,IAAI,CAACO,OAAD,CAAL,CAAR;AACA,UAAMG,SAAS,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,QAAQ,CAACL,KAAK,EAAN,CAAR;AACH,KAF2B,EAEzBI,KAFyB,CAA5B;AAGAb,IAAAA,QAAQ,CAACiB,IAAT,CAAcF,SAAd;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYnB,QAAQ,CAACoB,MAArB;;AACA,QAAGpB,QAAQ,CAACoB,MAAT,GAAkB,CAArB,EAAwB;AACpBpB,MAAAA,QAAQ,CAACqB,OAAT,CAAkBC,EAAD,IAAQ;AACrB,YAAGtB,QAAQ,CAACA,QAAQ,CAACoB,MAAT,GAAkB,CAAnB,CAAR,KAAkCE,EAArC,EAAwC;AACpCC,UAAAA,YAAY,CAACD,EAAD,CAAZ;AACH;AACJ,OAJD;AAKH;AACJ,GAdD;AAeH,CAhBM;AAiBP,eAAerB,iBAAiB,CAACuB,OAAjC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nlet timeouts = [];\n\nconst notificationSlice = createSlice({\n    name: 'notification',\n    initialState: '',\n    reducers: {\n        show(state, action) {\n            return state = action.payload\n        },\n        reset(state, action) {\n            return state = ''\n        },\n    }\n})\n\nexport const { show, reset } = notificationSlice.actions\n\nexport const setNotification = (content, timer) => {\n    return dispatch => {\n        dispatch(show(content))\n        const timeoutId = setTimeout(() => {\n            dispatch(reset())\n        }, timer)\n        timeouts.push(timeoutId)\n        console.log(timeouts.length)\n        if(timeouts.length > 1) {\n            timeouts.forEach((id) => {\n                if(timeouts[timeouts.length - 1] !== id){\n                    clearTimeout(id)\n                }\n            })\n        }\n    } \n}\nexport default notificationSlice.reducer\n"]},"metadata":{},"sourceType":"module"}