{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst notificationSlice = createSlice({\n  name: 'notifications',\n  initialState: [],\n  reducers: {\n    show(state, action) {\n      state.push(action.payload);\n      return state;\n    },\n\n    reset(state, action) {\n      return state = [];\n    },\n\n    clearTimeOut(state, action) {\n      let notifications = state.pop();\n\n      if (state.length > 1) {\n        state.forEach(notification => {\n          clearTimeout(notification.id);\n        });\n      }\n    }\n\n  }\n});\nexport const {\n  show,\n  reset,\n  clearTimeOut\n} = notificationSlice.actions;\nexport const setNotification = (content, timer) => {\n  return async dispatch => {\n    const timeoutId = setTimeout(() => {\n      dispatch(reset());\n    }, timer);\n    const notification = {\n      id: timeoutId,\n      message: content\n    };\n    dispatch(show(notification));\n    dispatch(clearTimeOut());\n  };\n};\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/mva18/Projects/fullstack_2022/part6/redux-anecdotes/src/reducers/notificationReducer.js"],"names":["createSlice","notificationSlice","name","initialState","reducers","show","state","action","push","payload","reset","clearTimeOut","notifications","pop","length","forEach","notification","clearTimeout","id","actions","setNotification","content","timer","dispatch","timeoutId","setTimeout","message","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,iBAAiB,GAAGD,WAAW,CAAC;AAClCE,EAAAA,IAAI,EAAE,eAD4B;AAElCC,EAAAA,YAAY,EAAE,EAFoB;AAGlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAChBD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACA,aAAOH,KAAP;AACH,KAJK;;AAKNI,IAAAA,KAAK,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACjB,aAAOD,KAAK,GAAG,EAAf;AACH,KAPK;;AAQNK,IAAAA,YAAY,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACxB,UAAIK,aAAa,GAAGN,KAAK,CAACO,GAAN,EAApB;;AACA,UAAGP,KAAK,CAACQ,MAAN,GAAe,CAAlB,EAAqB;AACjBR,QAAAA,KAAK,CAACS,OAAN,CAAeC,YAAD,IAAkB;AAC5BC,UAAAA,YAAY,CAACD,YAAY,CAACE,EAAd,CAAZ;AACH,SAFD;AAGH;AACJ;;AAfK;AAHwB,CAAD,CAArC;AAsBA,OAAO,MAAM;AAAEb,EAAAA,IAAF;AAAQK,EAAAA,KAAR;AAAeC,EAAAA;AAAf,IAAgCV,iBAAiB,CAACkB,OAAxD;AAEP,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC/C,SAAO,MAAMC,QAAN,IAAkB;AACrB,UAAMC,SAAS,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,QAAQ,CAACb,KAAK,EAAN,CAAR;AACH,KAF2B,EAEzBY,KAFyB,CAA5B;AAGA,UAAMN,YAAY,GAAI;AAClBE,MAAAA,EAAE,EAAEM,SADc;AAElBE,MAAAA,OAAO,EAAEL;AAFS,KAAtB;AAIAE,IAAAA,QAAQ,CAAClB,IAAI,CAACW,YAAD,CAAL,CAAR;AACAO,IAAAA,QAAQ,CAACZ,YAAY,EAAb,CAAR;AACH,GAVD;AAWH,CAZM;AAaP,eAAeV,iBAAiB,CAAC0B,OAAjC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst notificationSlice = createSlice({\n    name: 'notifications',\n    initialState: [],\n    reducers: {\n        show(state, action) {\n            state.push(action.payload)\n            return state\n        },\n        reset(state, action) {\n            return state = []\n        },\n        clearTimeOut(state, action) {\n            let notifications = state.pop()\n            if(state.length > 1) {\n                state.forEach((notification) => {\n                    clearTimeout(notification.id)\n                })\n            }\n        },\n    }\n})\n\nexport const { show, reset, clearTimeOut } = notificationSlice.actions\n\nexport const setNotification = (content, timer) => {\n    return async dispatch => {\n        const timeoutId = setTimeout(() => {\n            dispatch(reset())\n        }, timer)\n        const notification =  {\n            id: timeoutId,\n            message: content\n        }\n        dispatch(show(notification))\n        dispatch(clearTimeOut())\n    }\n}\nexport default notificationSlice.reducer\n"]},"metadata":{},"sourceType":"module"}