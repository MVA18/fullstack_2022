{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nlet timeoutsIds = [];\nconst notificationSlice = createSlice({\n  name: 'notifications',\n  initialState: [],\n  reducers: {\n    show(state, action) {\n      state.push(action.payload);\n    },\n\n    reset(state, action) {\n      return state = [];\n    }\n\n  }\n});\n\nconst clearTimeoutsQueue = async () => {\n  if (timeoutsIds.length > 1) {\n    timeoutsIds.pop();\n    clearTimeout(timeoutsIds[0]);\n    timeoutsIds = [];\n  }\n};\n\nexport const {\n  show,\n  reset\n} = notificationSlice.actions;\nexport const setNotification = (content, timer) => {\n  return dispatch => {\n    const timeoutId = setTimeout(() => {\n      dispatch(reset());\n    }, timer);\n    const notification = {\n      id: timeoutId,\n      message: content\n    };\n    dispatch(show(notification));\n    clearTimeoutsQueue();\n  };\n};\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/mva18/Projects/fullstack_2022/part6/redux-anecdotes/src/reducers/notificationReducer.js"],"names":["createSlice","timeoutsIds","notificationSlice","name","initialState","reducers","show","state","action","push","payload","reset","clearTimeoutsQueue","length","pop","clearTimeout","actions","setNotification","content","timer","dispatch","timeoutId","setTimeout","notification","id","message","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,IAAIC,WAAW,GAAG,EAAlB;AAEA,MAAMC,iBAAiB,GAAGF,WAAW,CAAC;AAClCG,EAAAA,IAAI,EAAE,eAD4B;AAElCC,EAAAA,YAAY,EAAE,EAFoB;AAGlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAChBD,MAAAA,KAAK,CAACE,IAAN,CAAWD,MAAM,CAACE,OAAlB;AACH,KAHK;;AAINC,IAAAA,KAAK,CAACJ,KAAD,EAAQC,MAAR,EAAgB;AACjB,aAAOD,KAAK,GAAG,EAAf;AACH;;AANK;AAHwB,CAAD,CAArC;;AAaA,MAAMK,kBAAkB,GAAG,YAAY;AACnC,MAAGX,WAAW,CAACY,MAAZ,GAAqB,CAAxB,EAA2B;AACvBZ,IAAAA,WAAW,CAACa,GAAZ;AACAC,IAAAA,YAAY,CAACd,WAAW,CAAC,CAAD,CAAZ,CAAZ;AACAA,IAAAA,WAAW,GAAG,EAAd;AACH;AACJ,CAND;;AAQA,OAAO,MAAM;AAAEK,EAAAA,IAAF;AAAQK,EAAAA;AAAR,IAAkBT,iBAAiB,CAACc,OAA1C;AAEP,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC/C,SAAOC,QAAQ,IAAI;AACf,UAAMC,SAAS,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,QAAQ,CAACT,KAAK,EAAN,CAAR;AACH,KAF2B,EAEzBQ,KAFyB,CAA5B;AAGA,UAAMI,YAAY,GAAI;AAClBC,MAAAA,EAAE,EAAEH,SADc;AAElBI,MAAAA,OAAO,EAAEP;AAFS,KAAtB;AAIAE,IAAAA,QAAQ,CAACd,IAAI,CAACiB,YAAD,CAAL,CAAR;AACAX,IAAAA,kBAAkB;AACrB,GAVD;AAWH,CAZM;AAaP,eAAeV,iBAAiB,CAACwB,OAAjC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nlet timeoutsIds = [];\n\nconst notificationSlice = createSlice({\n    name: 'notifications',\n    initialState: [],\n    reducers: {\n        show(state, action) {\n            state.push(action.payload)\n        },\n        reset(state, action) {\n            return state = []\n        },\n    }\n})\n\nconst clearTimeoutsQueue = async () => {\n    if(timeoutsIds.length > 1) {\n        timeoutsIds.pop()\n        clearTimeout(timeoutsIds[0])\n        timeoutsIds = [];\n    }\n}\n\nexport const { show, reset } = notificationSlice.actions\n\nexport const setNotification = (content, timer) => {\n    return dispatch => {\n        const timeoutId = setTimeout(() => {\n            dispatch(reset())\n        }, timer)\n        const notification =  {\n            id: timeoutId,\n            message: content\n        }\n        dispatch(show(notification))\n        clearTimeoutsQueue()\n    }\n}\nexport default notificationSlice.reducer\n"]},"metadata":{},"sourceType":"module"}