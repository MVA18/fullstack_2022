{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst notificationSlice = createSlice({\n  name: 'notification',\n  initialState: [],\n  reducers: {\n    show(state, action) {\n      clearTimeoutsQueue();\n      state.push(action.payload);\n      return state;\n    },\n\n    reset(state, action) {\n      return state = [];\n    }\n\n  }\n});\n\nconst clearTimeoutsQueue = () => {\n  if (state.length > 1) {\n    state.forEach(notification => {\n      clearTimeout(notification.id);\n    });\n  }\n};\n\nexport const {\n  show,\n  reset\n} = notificationSlice.actions;\nexport const setNotification = (content, timer) => {\n  return dispatch => {\n    const timeoutId = setTimeout(() => {\n      dispatch(reset());\n    }, timer);\n    const notification = {\n      id: timeoutId,\n      message: content\n    };\n    clearTimeoutsQueue();\n    dispatch(show(notification));\n  };\n};\nexport default notificationSlice.reducer;","map":{"version":3,"sources":["/home/mva18/Projects/fullstack_2022/part6/redux-anecdotes/src/reducers/notificationReducer.js"],"names":["createSlice","notificationSlice","name","initialState","reducers","show","state","action","clearTimeoutsQueue","push","payload","reset","length","forEach","notification","clearTimeout","id","actions","setNotification","content","timer","dispatch","timeoutId","setTimeout","message","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,iBAAiB,GAAGD,WAAW,CAAC;AAClCE,EAAAA,IAAI,EAAE,cAD4B;AAElCC,EAAAA,YAAY,EAAE,EAFoB;AAGlCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,IAAI,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAChBC,MAAAA,kBAAkB;AAClBF,MAAAA,KAAK,CAACG,IAAN,CAAWF,MAAM,CAACG,OAAlB;AACA,aAAOJ,KAAP;AACH,KALK;;AAMNK,IAAAA,KAAK,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACjB,aAAOD,KAAK,GAAG,EAAf;AACH;;AARK;AAHwB,CAAD,CAArC;;AAeA,MAAME,kBAAkB,GAAG,MAAM;AAC7B,MAAGF,KAAK,CAACM,MAAN,GAAe,CAAlB,EAAqB;AACjBN,IAAAA,KAAK,CAACO,OAAN,CAAeC,YAAD,IAAkB;AAC5BC,MAAAA,YAAY,CAACD,YAAY,CAACE,EAAd,CAAZ;AACH,KAFD;AAGH;AACJ,CAND;;AAQA,OAAO,MAAM;AAAEX,EAAAA,IAAF;AAAQM,EAAAA;AAAR,IAAkBV,iBAAiB,CAACgB,OAA1C;AAEP,OAAO,MAAMC,eAAe,GAAG,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC/C,SAAOC,QAAQ,IAAI;AACf,UAAMC,SAAS,GAAGC,UAAU,CAAC,MAAM;AAC/BF,MAAAA,QAAQ,CAACV,KAAK,EAAN,CAAR;AACH,KAF2B,EAEzBS,KAFyB,CAA5B;AAGA,UAAMN,YAAY,GAAI;AAClBE,MAAAA,EAAE,EAAEM,SADc;AAElBE,MAAAA,OAAO,EAAEL;AAFS,KAAtB;AAIAX,IAAAA,kBAAkB;AAClBa,IAAAA,QAAQ,CAAChB,IAAI,CAACS,YAAD,CAAL,CAAR;AACH,GAVD;AAWH,CAZM;AAaP,eAAeb,iBAAiB,CAACwB,OAAjC","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst notificationSlice = createSlice({\n    name: 'notification',\n    initialState: [],\n    reducers: {\n        show(state, action) {\n            clearTimeoutsQueue()\n            state.push(action.payload)\n            return state\n        },\n        reset(state, action) {\n            return state = []\n        },\n    }\n})\n\nconst clearTimeoutsQueue = () => {\n    if(state.length > 1) {\n        state.forEach((notification) => {\n            clearTimeout(notification.id)\n        })\n    }\n}\n\nexport const { show, reset } = notificationSlice.actions\n\nexport const setNotification = (content, timer) => {\n    return dispatch => {\n        const timeoutId = setTimeout(() => {\n            dispatch(reset())\n        }, timer)\n        const notification =  {\n            id: timeoutId,\n            message: content\n        }\n        clearTimeoutsQueue()\n        dispatch(show(notification))\n    }\n}\nexport default notificationSlice.reducer\n"]},"metadata":{},"sourceType":"module"}