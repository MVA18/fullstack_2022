{"ast":null,"code":"var _jsxFileName = \"/home/mva18/Projects/fullstack/part2/2.15-2.18/src/App.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport Persons from \"./components/Persons\";\nimport Filter from \"./components/Filter\";\nimport Form from \"./components/Form\";\nimport Notification from \"./components/Notification\";\nimport personsService from \"./services/persons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([]);\n  const [search, setSearch] = useState(false);\n  const [filteredPersons, setFilteredPersons] = useState([]);\n  const [notificationMessage, setNotificationMessage] = useState({\n    message: 'some error happened...',\n    type: ''\n  });\n  const contacts = search ? filteredPersons : persons;\n\n  const RemoveContact = contact => {\n    if (window.confirm(`Delete ${contact.name} ?`)) {\n      personsService.remove(contact.id).then(() => {\n        setPersons(persons.filter(n => n.id !== contact.id));\n        setNotificationMessage({\n          message: `Contact '${contact.name}' was successfully removed`,\n          type: 'success'\n        });\n        setTimeout(() => {\n          setNotificationMessage({\n            message: null,\n            type: null\n          });\n        }, 5000);\n      }).catch(error => {\n        setNotificationMessage({\n          message: `Contact '${contact.name}' was already removed from server`,\n          type: 'error'\n        });\n        setPersons(persons.filter(n => n.id !== contact.id));\n        setTimeout(() => {\n          setNotificationMessage({\n            message: null,\n            type: null\n          });\n        }, 5000);\n      });\n    }\n  };\n\n  const hook = () => {\n    personsService.getAll().then(initialPersons => {\n      setPersons(initialPersons);\n    });\n  };\n\n  useEffect(hook, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      notificationMessage: notificationMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      persons: persons,\n      setFilteredPersons: setFilteredPersons,\n      setSearch: setSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"add a new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      persons: persons,\n      setPersons: setPersons,\n      setNotificationMessage: setNotificationMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Persons, {\n      contacts: contacts,\n      removeContact: RemoveContact\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"6zpWRDHq8FVUij/rxHS+rnxSC34=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/mva18/Projects/fullstack/part2/2.15-2.18/src/App.js"],"names":["useState","useEffect","Persons","Filter","Form","Notification","personsService","App","persons","setPersons","search","setSearch","filteredPersons","setFilteredPersons","notificationMessage","setNotificationMessage","message","type","contacts","RemoveContact","contact","window","confirm","name","remove","id","then","filter","n","setTimeout","catch","error","hook","getAll","initialPersons"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport Persons from \"./components/Persons\";\nimport Filter from \"./components/Filter\";\nimport Form from \"./components/Form\";\nimport Notification from \"./components/Notification\";\nimport personsService from \"./services/persons\";\n\nconst App = () => {\n\n    const [persons, setPersons] = useState([])\n    const [search, setSearch] = useState(false)\n    const [filteredPersons, setFilteredPersons] = useState([])\n    const [notificationMessage, setNotificationMessage] = useState({message: 'some error happened...', type: '' })\n\n    const contacts = search ? filteredPersons : persons;\n\n    const RemoveContact = (contact) => {\n        if (window.confirm(`Delete ${contact.name} ?`)) {\n            personsService.remove(contact.id)\n                .then( () => {\n                        setPersons(persons.filter(n => n.id !== contact.id))\n                        setNotificationMessage({\n                            message: `Contact '${contact.name}' was successfully removed`,\n                            type: 'success'\n                        })\n                        setTimeout(() => {\n                            setNotificationMessage({message: null, type: null})\n                        }, 5000)\n                    })\n                .catch(error => {\n                    setNotificationMessage({\n                        message: `Contact '${contact.name}' was already removed from server`,\n                        type: 'error'\n                    })\n                    setPersons(persons.filter(n => n.id !== contact.id))\n                    setTimeout(() => {\n                        setNotificationMessage({message: null, type: null})\n                    }, 5000)\n                })\n        }\n    }\n\n    const hook = () => {\n        personsService.getAll()\n            .then(initialPersons => { setPersons(initialPersons) })\n    }\n    useEffect(hook, [])\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification notificationMessage={notificationMessage} />\n            <Filter persons={persons} setFilteredPersons={setFilteredPersons} setSearch={setSearch} />\n            <h2>add a new</h2>\n            <Form persons={persons} setPersons={setPersons} setNotificationMessage={setNotificationMessage}/>\n            <h2>Numbers</h2>\n            <Persons contacts={contacts} removeContact={RemoveContact}/>\n        </div>\n    )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}